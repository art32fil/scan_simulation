define sicksensor sensor
(				
  # factory settings for LMS200	
  range [ 0.0 8.0 ]
	pose [ 0 0 0.1 0 ]
  fov 270
  samples 180
  #samples 90 # still useful but much faster to compute
  color_rgba [ 0 0 1 0.15 ]
)

define sickcommon ranger
(
  color "blue"
  size [ 0.156 0.155 0.19 ] # dimensions from LMS200 data sheet	
 )

define sickbase sickcommon
(
	block( points 4
				 point[0] [0 0]
				 point[1] [0 1]
				 point[2] [1 1]
				 point[3] [1 0]
				 z [0 0.21]
				 )
)

define sicklaser sickbase ( sicksensor() )

#  prototype for p2dx sonar sensors
define p2dxsonar sensor
(
  # define the size of each transducer [xsize ysize zsize] in meters
  size [0.01 0.05 0.01 ] 
  # define the range bounds [min max]
  range [0 5.0]
	# define the angular field of view in degrees
	fov 15
	# define the number of samples spread over the fov
  samples 1
	# define the color that ranges are drawn in the gui
	color_rgba [ 0 1 0 0.2 ] 
)

define p2dx_sonar ranger
(
 # 16 transducers spread about the robot as follows
 p2dxsonar( pose [ 0 0 0 0 ] )
)

define pioneer_base position 
(
  color "red"			# Default color.
  drive "diff"		 	# Differential steering model.
  gui_nose 1                  	# Draw a nose on the robot so we can see which way it points
  obstacle_return 1           	# Can hit things.
  ranger_return 0.5            	# reflects sonar beams
  blob_return 1               	# Seen by blobfinders  
  fiducial_return 1           	# Seen as "1" fiducial finders

  localization "gps"         	  
  localization_origin [0 0 0 0] 	# Start odometry at (0, 0, 0).

  # alternative odometric localization with simple error model
  # localization "odom"         		# Change to "gps" to have impossibly perfect, global odometry
  #  odom_error [ 0.05 0.05 0.1 ]   	# Odometry error or slip in X, Y and Theta
                                   	# (Uniform random distribution)   

  # four DOF kinematics limits
  # [ xmin xmax ymin ymax zmin zmax amin amax ]				
  velocity_bounds [-10 10 0 0 0 0 -90.0 90.0 ]					
  acceleration_bounds [-10 10 0 0 0 0 -90 90.0 ]
)



define pioneer2dx_base_no_sonar pioneer_base
(
  # actual size
  size [0.44 0.38 0.22] # sizes from MobileRobots' web site

  # the pioneer's center of rotation is offset from its center of area
  origin [-0.04 0 0 0]

  # draw a nose on the robot so we can see which way it points
  gui_nose 1

  # estimated mass in KG
  mass 23.0 
  # differential steering model
  drive "diff"
 )


define pioneer2dx_base pioneer2dx_base_no_sonar
(
  # use the sonar array defined above with a small vertical offset to
  # drop the sensors into the robot body
  p2dx_sonar( pose [0 0 -0.03 0] ) 
)


define pioneer2dx pioneer2dx_base
(  
  # simplified Body shape:
  block( 
    points 8
    point[0] [-0.2 0.12]
    point[1] [-0.2 -0.12]
    point[2] [-0.12 -0.2555]
    point[3] [0.12 -0.2555]
    point[4] [0.2 -0.12]
    point[5] [0.2 0.12]
    point[6] [0.12 0.2555]
    point[7] [-0.12 0.2555]
    z [0 0.22]
  )
)

define floorplan model
(
  # sombre, sensible, artistic
  color "gray30"

  # most maps will need a bounding box
  boundary 1

  gui_nose 0
  gui_grid 0
  gui_move 0
  gui_outline 0
  gripper_return 0
  fiducial_return 0
  ranger_return 0.5

  obstacle_return 0
)

#############################################################################

# time to pause (in GUI mode) or quit (in headless mode (-g)) the simulation
quit_time 3600 # 1 hour of simulated time

paused 1

resolution 0.02

# configure the GUI window
window
(
  size [ 635.000 666.000 ] # in pixels
  scale 36.995   # pixels per meter
  center [ -0.040  -0.274 ]
  rotate [ 0  0 ]
  			
  show_data 1              # 1=on 0=off
)

# load an environment bitmap
floorplan
( 
  name "cave"
  size [16.000 16.000 0.800]
  pose [0 0 0 0]
  bitmap "bitmaps/cave.png"
)


pioneer2dx
(		  
  # can refer to the robot by this name
  name "r0"
  pose [ -6.946 -6.947 0 45.000 ] 

  # pioneer2dx's sonars	will be ranger:0 and the laser will be ranger:1
  sicklaser( pose [ 0 0 0 0 ] ) 
 
  # demonstrate a plugin controller, implemented in examples/ctrl/wander.cc
  # you probably should comment this out when using simple.cfg with Player
  ctrl "wander"

  # report error-free position in world coordinates
  localization "gps"
  localization_origin [ 0 0 0 0 ]
)
